#! /usr/bin/env python

import os
import sys
import traceback
import warnings
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # or any {'0', '1', '2'}
warnings.filterwarnings('ignore') 

import algorithm.utils as utils
import algorithm.model_server as model_server

# Paths for inputs, model, outputs for ml_vol mounted to the container.
prefix = '/opt/ml_vol/'
data_path = os.path.join(prefix, 'inputs', 'data')
data_schema_path = os.path.join(prefix, 'inputs', 'data_config')
model_path = os.path.join(prefix, 'model', 'artifacts')
output_path = os.path.join(prefix, 'outputs')
testing_outputs_path = os.path.join(output_path, 'testing_outputs')
failure_path = os.path.join(output_path, 'errors', 'test_failure')
test_pred_file_name = "test_predictions.csv"

# Since we run in File mode, the input files are copied to the directory specified here.
channel_name='testing'
data_path = os.path.join(data_path, channel_name, "textClassificationBaseMainInput")


# The function to execute the testing.
def test():    
    try:        
        print('Starting test predictions')
        # Read data
        test_data = utils.get_data(data_path)   
        # read data config
        data_schema = utils.get_data_schema(data_schema_path) 
        # instantiate the trained model (does lazy loading)
        predictor = model_server.ModelServer(model_path, data_schema)
        # make predictions
        predictions = predictor.predict(test_data)
        # save results 
        utils.save_dataframe(predictions, testing_outputs_path, test_pred_file_name)
        print('Done test predictions.')
    except Exception as e:
        print("error!")
        # Write out an error file. This will be returned as the failureReason to the client.
        trc = traceback.format_exc()
        with open(failure_path, 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)


if __name__ == '__main__':
    test()